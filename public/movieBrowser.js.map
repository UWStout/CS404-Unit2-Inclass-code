{
  "version": 3,
  "sources": ["../client/dataHelper.js", "../client/movieBrowser.js"],
  "sourcesContent": ["/**\n * Retrieve all movie data from the server. Identical in behavior and\n * signature to the retrieveMovies() method, but uses async-await.\n *\n * @returns {Promise(object[])} Promise that resolves to an array of movies\n */\nexport async function retrieveMoviesAsync () {\n  const response = await fetch('./data/movie')\n  const data = await response.json()\n  return data\n}\n\n/**\n * Retrieve details for a single movie using the given URL\n *\n * @returns {Promise(object[])} Promise that resolves to an array of movies\n */\nexport async function retrieveDetailsAsync (movieId) {\n  const response = await fetch(`/data/movie/${movieId}`)\n  const data = await response.json()\n  return data\n}\n", "// Bring in the retrieveMovies function for local use\nimport { retrieveMoviesAsync, retrieveDetailsAsync } from './dataHelper.js'\n\n// Construct our BS Modal\nconst detailsModal = new bootstrap.Modal('#detailsModal')\n\n// Run initialization code when the page finishes loading\ndocument.addEventListener('DOMContentLoaded', async () => {\n  try {\n    // 1. Retrieve all the movie data\n    const movieData = await retrieveMoviesAsync()\n\n    // 2. Render all movies as movie cards\n    if (movieData && Array.isArray(movieData)) {\n      renderAllMoviesAsCards(movieData)\n    }\n  } catch (error) {\n    // Catch any errors and report them\n    console.error('Failed to retrieve data')\n    console.error(error)\n    window.alert('Data retrieval error')\n  }\n})\n\n// Build cards based on the array of movies and append them\n// to the movie row of the grid.\nfunction renderAllMoviesAsCards (movieData) {\n  // Retrieve reference to the movie row element\n  const movieRowDiv = document.querySelector('#movieRow')\n\n  // Loop over all movies in the array\n  movieData.forEach((movie) => {\n    // Build a new div with the needed class names\n    const movieCardDiv = document.createElement('div')\n    movieCardDiv.className = 'col-sm-6 col-md-4 col-lg-3'\n\n    // Set inner HTML with the movie data\n    movieCardDiv.innerHTML = `\n      <div class='movieSummary'>\n        <a data-movie-id='${movie.id}' class='detailsLink'>\n          <span class=\"summaryTitle\">${movie.title}</span>\n          <img\n            src=\"../images/thumbs/${movie.image}\"\n            alt=\"Poster for the movie ${movie.title}\"\n            height=\"250px\"\n          />\n        </a><br/>\n        <span class=\"summaryInfo\">\n          ${movie.genres.join(', ')}<br/>\n          ${movie.rated}, ${movie.year}\n        </span>\n      </div> <!-- /movieSummary-->\n    `\n\n    // Append the new card to the movie row\n    movieRowDiv.appendChild(movieCardDiv)\n  })\n\n  // Fix the link tags\n  const allLinks = document.querySelectorAll('.detailsLink')\n  const arrayLinks = Array.from(allLinks)\n  arrayLinks.forEach((link) => {\n    link.addEventListener('click', detailsRequested)\n  })\n}\n\nasync function detailsRequested (event) {\n  // Prevent visiting the link\n  event.preventDefault()\n\n  // Extract the href attribute from the link tag\n  const movieId = event.currentTarget.dataset.movieId\n\n  try {\n    // Get the movie details asynchronously\n    const details = await retrieveDetailsAsync(movieId)\n\n    // Fill in all the detail elements\n    // NOTE: I didn't get to this part in class. It coordinates with the\n    //       complicated bits in index.html so see index.html and all the\n    //       elements with id=\"details-???\" that I added.\n\n    // Get an array containing all the properties of the 'details' object\n    // as strings then loop over all those properties\n    const keys = Object.keys(details)\n    keys.forEach((key) => {\n      // For each property, get the element with a matching 'details-??' ID\n      const element = document.querySelector(`#details-${key}`)\n      if (!element) {\n        console.error(`Failed to find details element for ${key}`)\n      } else {\n        // We must handle the 'image' property differently\n        if (key === 'image') {\n          // Set both the 'src' and 'alt' attributes for the 'img' tag\n          element.setAttribute('src', `../images/posters/${details[key]}`)\n          element.setAttribute('alt', `Movie poster for \"${details.title}`)\n        } else {\n          // All other properties, set the text content\n          if (Array.isArray(details[key])) {\n            element.textContent = details[key].join(', ')\n          } else {\n            element.textContent = details[key]\n          }\n        }\n      }\n    })\n\n    // Now that all the details are fill in, show the modal\n    detailsModal.show()\n  } catch (error) {\n    console.error('Failed to retrieve/display movie details')\n    console.error(error)\n    window.alert('Error retrieving/showing details (see console)')\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,WAAsB,sBAAuB;AAAA;AAC3C,YAAM,WAAW,MAAM,MAAM,cAAc;AAC3C,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO;AAAA,IACT;AAAA;AAOA,WAAsB,qBAAsB,SAAS;AAAA;AACnD,YAAM,WAAW,MAAM,MAAM,eAAe,OAAO,EAAE;AACrD,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO;AAAA,IACT;AAAA;;;ACjBA,MAAM,eAAe,IAAI,UAAU,MAAM,eAAe;AAGxD,WAAS,iBAAiB,oBAAoB,MAAY;AACxD,QAAI;AAEF,YAAM,YAAY,MAAM,oBAAoB;AAG5C,UAAI,aAAa,MAAM,QAAQ,SAAS,GAAG;AACzC,+BAAuB,SAAS;AAAA,MAClC;AAAA,IACF,SAAS,OAAO;AAEd,cAAQ,MAAM,yBAAyB;AACvC,cAAQ,MAAM,KAAK;AACnB,aAAO,MAAM,sBAAsB;AAAA,IACrC;AAAA,EACF,EAAC;AAID,WAAS,uBAAwB,WAAW;AAE1C,UAAM,cAAc,SAAS,cAAc,WAAW;AAGtD,cAAU,QAAQ,CAAC,UAAU;AAE3B,YAAM,eAAe,SAAS,cAAc,KAAK;AACjD,mBAAa,YAAY;AAGzB,mBAAa,YAAY;AAAA;AAAA,4BAED,MAAM,EAAE;AAAA,uCACG,MAAM,KAAK;AAAA;AAAA,oCAEd,MAAM,KAAK;AAAA,wCACP,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,YAKvC,MAAM,OAAO,KAAK,IAAI,CAAC;AAAA,YACvB,MAAM,KAAK,KAAK,MAAM,IAAI;AAAA;AAAA;AAAA;AAMlC,kBAAY,YAAY,YAAY;AAAA,IACtC,CAAC;AAGD,UAAM,WAAW,SAAS,iBAAiB,cAAc;AACzD,UAAM,aAAa,MAAM,KAAK,QAAQ;AACtC,eAAW,QAAQ,CAAC,SAAS;AAC3B,WAAK,iBAAiB,SAAS,gBAAgB;AAAA,IACjD,CAAC;AAAA,EACH;AAEA,WAAe,iBAAkB,OAAO;AAAA;AAEtC,YAAM,eAAe;AAGrB,YAAM,UAAU,MAAM,cAAc,QAAQ;AAE5C,UAAI;AAEF,cAAM,UAAU,MAAM,qBAAqB,OAAO;AASlD,cAAM,OAAO,OAAO,KAAK,OAAO;AAChC,aAAK,QAAQ,CAAC,QAAQ;AAEpB,gBAAM,UAAU,SAAS,cAAc,YAAY,GAAG,EAAE;AACxD,cAAI,CAAC,SAAS;AACZ,oBAAQ,MAAM,sCAAsC,GAAG,EAAE;AAAA,UAC3D,OAAO;AAEL,gBAAI,QAAQ,SAAS;AAEnB,sBAAQ,aAAa,OAAO,qBAAqB,QAAQ,GAAG,CAAC,EAAE;AAC/D,sBAAQ,aAAa,OAAO,qBAAqB,QAAQ,KAAK,EAAE;AAAA,YAClE,OAAO;AAEL,kBAAI,MAAM,QAAQ,QAAQ,GAAG,CAAC,GAAG;AAC/B,wBAAQ,cAAc,QAAQ,GAAG,EAAE,KAAK,IAAI;AAAA,cAC9C,OAAO;AACL,wBAAQ,cAAc,QAAQ,GAAG;AAAA,cACnC;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAGD,qBAAa,KAAK;AAAA,MACpB,SAAS,OAAO;AACd,gBAAQ,MAAM,0CAA0C;AACxD,gBAAQ,MAAM,KAAK;AACnB,eAAO,MAAM,gDAAgD;AAAA,MAC/D;AAAA,IACF;AAAA;",
  "names": []
}
